<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Microsoft_Windows_Aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:b="clr-namespace:Bubba"
    xmlns:sfskin="clr-namespace:Syncfusion.SfSkinManager;assembly=Syncfusion.SfSkinManager.WPF"
    xmlns:shared="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.WPF"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:themelocal="clr-namespace:Syncfusion.Themes.FluentDark.WPF">

    <ResourceDictionary.MergedDictionaries>
        <sfskin:ResourceDictionaryProvider
            DictionaryName="Common"
            ThemeName="FluentDark" />
        <sfskin:ResourceDictionaryProvider
            DictionaryName="Brushes"
            ThemeName="FluentDark" />
        <ResourceDictionary Source="/Syncfusion.Themes.FluentDark.WPF;component/MSControl/GlyphRepeatButton.xaml" />
        <ResourceDictionary Source="/Syncfusion.Themes.FluentDark.WPF;component/MSControl/RepeatButton.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <shared:ProgressConverter x:Key="ProgressConverter" />
    <shared:ClipConverter x:Key="ClipConverter" />
    <shared:RadiusConverter x:Key="CornerRadiusConverter" />
    <shared:BooleanToVisibilityConverterEx x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="WatermarkContentTemplate">
        <TextBlock
            Style="{x:Null}"
            Text="{Binding}" />
    </DataTemplate>

    <Style
        x:Key="SyncfusionIntegerTextBoxStyle"
        TargetType="{x:Type shared:IntegerTextBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="CaretBrush" Value="{StaticResource ContentForeground}" />
        <Setter Property="SelectionBrush" Value="{StaticResource PrimaryBackground}" />
        <Setter Property="Foreground" Value="{StaticResource ContentForeground}" />
        <Setter Property="PositiveForeground" Value="{StaticResource ContentForeground}" />
        <Setter Property="NegativeForeground" Value="{StaticResource ContentForeground}" />
        <Setter Property="ZeroColor" Value="{StaticResource ContentForeground}" />
        <Setter Property="RangeAdornerBackground" Value="{StaticResource ContentBackgroundAlt4}" />
        <Setter Property="Background" Value="{StaticResource ContentBackgroundAlt4}" />
        <Setter Property="BorderBrush" Value="{StaticResource Border}" />
        <Setter Property="WatermarkTextForeground" Value="{StaticResource PlaceholderForeground}" />
        <Setter Property="WatermarkBackground" Value="{StaticResource ContentBackground}" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource WatermarkContentTemplate}" />
        <Setter Property="FontFamily" Value="{StaticResource FluentDark.ThemeFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FluentDark.BodyTextStyle}" />
        <Setter Property="FontWeight" Value="{StaticResource FluentDark.FontWeightNormal}" />
        <Setter Property="FocusedBorderBrush" Value="{StaticResource PrimaryBackground}" />
        <Setter Property="BorderThickness" Value="{StaticResource FluentDark.ThemeBorderThicknessVariant1}" />
        <Setter Property="CornerRadius" Value="{StaticResource FluentDark.ThemeCornerRadiusVariant1}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="WatermarkOpacity" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type shared:IntegerTextBox}">
                    <Grid x:Name="ContentHost">
                        <Border
                            x:Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{StaticResource FluentDark.CornerRadius2}"
                            SnapsToDevicePixels="True">
                            <Border.Clip>
                                <RectangleGeometry
                                    RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource CornerRadiusConverter}}"
                                    RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource CornerRadiusConverter}}">
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource ClipConverter}">
                                            <Binding
                                                Path="ActualWidth"
                                                RelativeSource="{RelativeSource FindAncestor,
                                                                                AncestorType={x:Type Border}}" />
                                            <Binding
                                                Path="ActualHeight"
                                                RelativeSource="{RelativeSource FindAncestor,
                                                                                AncestorType={x:Type Border}}" />
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </Border.Clip>
                            <Grid x:Name="InnerContentHost">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border
                                    x:Name="RangeAdornerBorder"
                                    Background="{TemplateBinding RangeAdornerBackground}"
                                    BorderThickness="{StaticResource FluentDark.BorderThickness}"
                                    IsHitTestVisible="False"
                                    Visibility="Collapsed">
                                    <Border.RenderTransform>
                                        <ScaleTransform>
                                            <ScaleTransform.ScaleX>
                                                <MultiBinding Converter="{StaticResource ProgressConverter}">
                                                    <Binding
                                                        Path="Value"
                                                        RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding
                                                        Path="ActualWidth"
                                                        RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding
                                                        Path="MaxValue"
                                                        RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding
                                                        Path="MinValue"
                                                        RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding>
                                            </ScaleTransform.ScaleX>
                                        </ScaleTransform>
                                    </Border.RenderTransform>
                                </Border>

                                <ScrollViewer
                                    x:Name="PART_ContentHost"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Background="Transparent"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Visibility="{TemplateBinding ContentElementVisibility}" />

                                <ContentControl
                                    x:Name="PART_Watermark"
                                    Grid.Row="0"
                                    Margin="{TemplateBinding Padding}"
                                    Padding="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Background="{TemplateBinding WatermarkBackground}"
                                    Content="{TemplateBinding WatermarkText}"
                                    ContentTemplate="{TemplateBinding WatermarkTemplate}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{StaticResource FluentDark.BodyTextStyle}"
                                    FontStretch="{TemplateBinding FontStretch}"
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontWeight="{StaticResource FluentDark.FontWeightNormal}"
                                    Foreground="{TemplateBinding WatermarkTextForeground}"
                                    IsHitTestVisible="False"
                                    IsTabStop="False"
                                    Opacity="{TemplateBinding WatermarkOpacity}"
                                    Visibility="{TemplateBinding WatermarkVisibility}" />
                                <Grid
                                    x:Name="spinButtonGrid"
                                    Grid.Column="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ShowSpinButton, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="1*" />
                                        <RowDefinition Height="1*" />
                                    </Grid.RowDefinitions>

                                    <RepeatButton
                                        x:Name="upbutton"
                                        Width="16"
                                        Margin="0"
                                        Padding="{TemplateBinding Padding}"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{StaticResource FluentDark.BorderThickness1000}"
                                        Cursor="Arrow"
                                        Focusable="{TemplateBinding Focusable}"
                                        IsTabStop="False"
                                        SnapsToDevicePixels="True"
                                        Style="{StaticResource WPFGlyphRepeatButtonStyle}">
                                        <Path
                                            x:Name="upbuttonpath"
                                            Width="8"
                                            Height="4"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Fill="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(TextBlock.Foreground)}"
                                            SnapsToDevicePixels="True"
                                            Stretch="Uniform">
                                            <Path.Data>
                                                <PathGeometry>M4.9960045,0 L10.008001,5.6040001 9.2630047,6.2709999 4.9960045,1.5 0.74499548,6.2530002 0,5.5860004 z</PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </RepeatButton>
                                    <RepeatButton
                                        x:Name="downbutton"
                                        Grid.Row="1"
                                        Width="16"
                                        Margin="0"
                                        Padding="{TemplateBinding Padding}"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{StaticResource FluentDark.BorderThickness1000}"
                                        Cursor="Arrow"
                                        Focusable="{TemplateBinding Focusable}"
                                        IsTabStop="False"
                                        SnapsToDevicePixels="True"
                                        Style="{StaticResource WPFGlyphRepeatButtonStyle}">
                                        <Path
                                            x:Name="downbuttonpath"
                                            Width="8"
                                            Height="4"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Fill="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(TextBlock.Foreground)}"
                                            SnapsToDevicePixels="True"
                                            Stretch="Uniform">
                                            <Path.Data>
                                                <PathGeometry>M0.74499548,0 L5.0119957,4.7700001 9.2630047,0.017000169 10.008001,0.68400005 5.0119957,6.2700001 0,0.66699985 z</PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </RepeatButton>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="sfskin:SfSkinManager.SizeMode" Value="Touch">
                            <Setter Property="MinHeight" Value="{StaticResource TouchMode.MinHeight}" />
                            <Setter TargetName="downbutton" Property="MinHeight" Value="16" />
                            <Setter TargetName="upbutton" Property="MinHeight" Value="16" />
                        </Trigger>
                        <Trigger Property="EnableRangeAdorner" Value="False">
                            <Setter TargetName="Border" Property="Clip" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="upbutton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="downbutton" Property="IsEnabled" Value="False" />

                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PrimaryBackground}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ContentBackground}" />
                            <Setter Property="BorderThickness" Value="{StaticResource FluentDark.BorderThickness2}" />
                            <Setter Property="Padding" Value="0" />
                            <Setter TargetName="downbutton" Property="Padding" Value="0,-1,-2,-2" />
                            <Setter TargetName="upbutton" Property="Padding" Value="0,-1.5,-2,0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="BorderThickness" Value="0" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Padding" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyNegativeForeground" Value="True" />
                                <Condition Property="IsNegative" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=NegativeForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ApplyZeroColor" Value="True" />
                                <Condition Property="IsZero" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=ZeroColor}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsNegative" Value="False" />
                                <Condition Property="IsZero" Value="False" />
                                <Condition Property="IsNull" Value="False" />
                                <Condition Property="EnableRangeAdorner" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=PositiveForeground}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource BorderAlt}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderAlt}" />
                            <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForeground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="EnableRangeAdorner" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                                <Condition Property="IsKeyboardFocusWithin" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RangeAdornerBorder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderAlt2}" />
                            <Setter TargetName="PART_Watermark" Property="Background" Value="{StaticResource ContentBackgroundAlt4}" />
                            <Setter TargetName="PART_Watermark" Property="Foreground" Value="{StaticResource PlaceholderForeground}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PrimaryBackground}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ContentBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        BasedOn="{StaticResource SyncfusionIntegerTextBoxStyle}"
        TargetType="{x:Type shared:IntegerTextBox}" />

</ResourceDictionary>
