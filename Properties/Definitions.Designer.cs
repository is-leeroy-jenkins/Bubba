//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bubba.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Definitions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Definitions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Bubba.Properties.Definitions", typeof(Definitions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list..
        /// </summary>
        internal static string After {
            get {
                return ResourceManager.GetString("After", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of chat completion choices. Can contain more than one elements if n is greater than 1. Can also be empty for the last chunk if you set stream_options: {&quot;include_usage&quot;: true}..
        /// </summary>
        internal static string Choices {
            get {
                return ResourceManager.GetString("Choices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Unix timestamp (in seconds) of when the chat completion was created..
        /// </summary>
        internal static string Created {
            get {
                return ResourceManager.GetString("Created", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of dimensions the resulting output embeddings should have. Only supported in text-embedding-3 and later models..
        /// </summary>
        internal static string Dimensions {
            get {
                return ResourceManager.GetString("Dimensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The embedding vector: a list of floats. .
        /// </summary>
        internal static string Embedding {
            get {
                return ResourceManager.GetString("Embedding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format to return the embeddings in. Can be either float or base64..
        /// </summary>
        internal static string EncodingFormat {
            get {
                return ResourceManager.GetString("EncodingFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The File object (not file name) to be uploaded.  Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.  For audio: the audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm..
        /// </summary>
        internal static string File {
            get {
                return ResourceManager.GetString("File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the file..
        /// </summary>
        internal static string FileName {
            get {
                return ResourceManager.GetString("FileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, tool_calls if the model called a tool, or function_call (deprecated) if the model called a function..
        /// </summary>
        internal static string FinishReason {
            get {
                return ResourceManager.GetString("FinishReason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&apos;s likelihood to repeat the same line verbatim..
        /// </summary>
        internal static string FrequencyPenalty {
            get {
                return ResourceManager.GetString("FrequencyPenalty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for text-embedding-ada-002), cannot be an empty string, and any array must be 2048 dimensions or less. Example Python code for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs..
        /// </summary>
        internal static string Input {
            get {
                return ResourceManager.GetString("Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000..
        /// </summary>
        internal static string Limit {
            get {
                return ResourceManager.GetString("Limit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token..
        /// </summary>
        internal static string LogitBias {
            get {
                return ResourceManager.GetString("LogitBias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message..
        /// </summary>
        internal static string LogProbs {
            get {
                return ResourceManager.GetString("LogProbs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens..
        /// </summary>
        internal static string MaxCompletionTokens {
            get {
                return ResourceManager.GetString("MaxCompletionTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of messages comprising the conversation so far. Depending on the model you use, different message types (modalities) are supported, like text, images, and audio..
        /// </summary>
        internal static string Messages {
            get {
                return ResourceManager.GetString("Messages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision..
        /// </summary>
        internal static string MimeType {
            get {
                return ResourceManager.GetString("MimeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output types that you would like the model to generate for this request. Most models are capable of generating text, which is the default: [&quot;text&quot;]; To request that this model generate both text and audio responses, you can use: [&quot;text&quot;, &quot;audio&quot;].
        /// </summary>
        internal static string Modalities {
            get {
                return ResourceManager.GetString("Modalities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For images: the number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.  For text: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs..
        /// </summary>
        internal static string Number {
            get {
                return ResourceManager.GetString("Number", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order..
        /// </summary>
        internal static string Order {
            get {
                return ResourceManager.GetString("Order", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&apos;s likelihood to talk about new topics..
        /// </summary>
        internal static string PresencePenalty {
            get {
                return ResourceManager.GetString("PresencePenalty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For images: A text description of the desired image(s). The maximum length is 1000 characters..
        /// </summary>
        internal static string Prompt {
            get {
                return ResourceManager.GetString("Prompt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constrains effort on reasoning for reasoning models. Currently supported values are low, medium, and high. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response..
        /// </summary>
        internal static string ReasoningEffort {
            get {
                return ResourceManager.GetString("ReasoningEffort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object specifying the format that the model must output. Setting to { &quot;type&quot;: &quot;json_schema&quot;, &quot;json_schema&quot;: {...} } enables Structured Outputs which ensures the model will match your supplied JSON schema.  Setting to { &quot;type&quot;: &quot;json_object&quot; } enables JSON mode, which ensures the message the model generates is valid JSON.  For images: the format in which the generated images are returned. Must be one of url or b64_json. URLs are only valid for 60 minutes after the image has been generated.  For audio: the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ResponseFormat {
            get {
                return ResourceManager.GetString("ResponseFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend..
        /// </summary>
        internal static string Seed {
            get {
                return ResourceManager.GetString("Seed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models..
        /// </summary>
        internal static string Size {
            get {
                return ResourceManager.GetString("Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The speed of the generated audio. Select a value from 0.25 to 4.0. 1.0 is the default..
        /// </summary>
        internal static string Speed {
            get {
                return ResourceManager.GetString("Speed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Up to 4 sequences where the API will stop generating further tokens..
        /// </summary>
        internal static string Stop {
            get {
                return ResourceManager.GetString("Stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether or not to store the output of this chat completion request for use in our model distillation or evals products..
        /// </summary>
        internal static string Store {
            get {
                return ResourceManager.GetString("Store", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A true or false value that, if set, partial message deltas will be sent like in ChatGPT. .
        /// </summary>
        internal static string Stream {
            get {
                return ResourceManager.GetString("Stream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3..
        /// </summary>
        internal static string Style {
            get {
                return ResourceManager.GetString("Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string of up to 64 characters that will be added to your fine-tuned model name..
        /// </summary>
        internal static string Suffix {
            get {
                return ResourceManager.GetString("Suffix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both..
        /// </summary>
        internal static string Temperature {
            get {
                return ResourceManager.GetString("Temperature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used..
        /// </summary>
        internal static string TopLogProbs {
            get {
                return ResourceManager.GetString("TopLogProbs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both..
        /// </summary>
        internal static string TopPercent {
            get {
                return ResourceManager.GetString("TopPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of an uploaded file that contains training data.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose fine-tune..
        /// </summary>
        internal static string TrainingFile {
            get {
                return ResourceManager.GetString("TrainingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ID of an uploaded file that contains validation data..
        /// </summary>
        internal static string ValidationFile {
            get {
                return ResourceManager.GetString("ValidationFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The voice to use when generating the audio. Supported voices are alloy, ash, coral, echo, fable, onyx, nova, sage and shimmer. .
        /// </summary>
        internal static string Voice {
            get {
                return ResourceManager.GetString("Voice", resourceCulture);
            }
        }
    }
}
